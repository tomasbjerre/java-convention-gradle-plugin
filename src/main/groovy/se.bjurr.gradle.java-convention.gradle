// ---- default config ----
interface JavaConventionPluginExtension {
	Property<String> getMainClass()
	Property<String> getSourceCompatibility()
	Property<String> getTargetCompatibility()
	Property<String> getMaxViolations()
	ListProperty<String> getFormattingExcludedPatterns()
	ListProperty<String> getGeneratedSourceFolders()
	ListProperty<String> getExtraTestSourceFolders()
	ListProperty<String> getJarResourcesFolder()
	Property<String> getUseViolations()
}

def extension = project.extensions.create("javaConvention", JavaConventionPluginExtension)
extension.mainClass.convention("")
extension.sourceCompatibility.convention(17)
extension.targetCompatibility.convention(17)
extension.maxViolations.convention(0)
extension.formattingExcludedPatterns.convention(["**/gen/**","**/generated/**","**/generated-source/**"])
extension.generatedSourceFolders.convention(["src/gen/java","src/generated/java"])
extension.extraTestSourceFolders.convention(["src/test/generated"])
extension.jarResourcesFolder.convention(["src/jar/resources"])
extension.useViolations.convention(true)
// ---- default config ----

project.plugins.apply "se.bjurr.violations.violations-gradle-plugin"
project.plugins.apply "com.github.spotbugs"
project.plugins.apply "pmd"
project.plugins.apply 'java-library'
project.plugins.apply 'eclipse'
project.plugins.apply "com.diffplug.spotless"
project.plugins.apply 'groovy'


repositories {
	mavenLocal()
	mavenCentral()
}

sourceCompatibility = getEffectiveJavaConventions().sourceCompatibility
targetCompatibility = getEffectiveJavaConventions().targetCompatibility

getEffectiveJavaConventions().generatedSourceFolders.each {
	addSourceFolderIfExists(it)
}

getEffectiveJavaConventions().extraTestSourceFolders.each {
	addTestSourceFolderIfExists(it)
}

test {
	if (System.getProperty('DEBUG', 'false') == 'true') {
		jvmArgs '-Xdebug',
				'-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009',
				'-parameters'
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:-deprecation"
	options.compilerArgs << "-Xlint:-processing"
	options.compilerArgs << "-Xdoclint:none"
	options.warnings = false
	options.compilerArgs << "-parameters"
	options.encoding = "UTF-8"
	sourceCompatibility = getEffectiveJavaConventions().sourceCompatibility
	targetCompatibility = getEffectiveJavaConventions().targetCompatibility
}

allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}


/**
 * If one of the Violations projects.
 */
try {
	se.bjurr.violations.lib.util.Utils.updateReadmeWithReporters()
	logger.info("Updated README with list of reporters")
} catch (e) {
	logger.info("Not updating README with list of reporters: "+e.getMessage())
}


/**
 * If command line tool
 */
if (getEffectiveJavaConventions().mainClass != '') {
	jar {
		manifest {
			attributes 'Main-Class': getEffectiveJavaConventions().mainClass
		}
		if (new File(getEffectiveJavaConventions().jarResourcesFolder).exists()) {
			from getEffectiveJavaConventions().jarResourcesFolder
		}
	}
}


/**
 * Static code analysis
 */

dependencies {
	spotbugs 'com.github.spotbugs:spotbugs:4.8.3'
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
	compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
}

assemble.doLast {
	copyIfFound("spotbugs-exclude.xml")
	copyIfFound("pmd.xml")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	enabled = false
}

spotbugsMain {
	enabled = true
	ignoreFailures = true
	effort = com.github.spotbugs.snom.Effort.MAX
	showProgress = true
	showStackTraces = false
	excludeFilter = new File("$buildDir/spotbugs-exclude.xml")
	reportsDir = new File("$buildDir/reports/spotbugs/")
	reports {
		xml {
			enabled true
		}
	}
}

pmd {
	sourceSets = [sourceSets.main]
	toolVersion = '6.55.0'
	ruleSets = [] // Gradle has some defaults that needs to be cleared
	ruleSetFiles = files("$buildDir/pmd.xml")
}

pmdMain {
	source = "src/main/java"
	ignoreFailures = true
	reports {
		xml.required = true
		html.required = true
	}
}

if (getEffectiveJavaConventions().useViolations) {
	task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
		minSeverity = 'INFO'
		detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
		maxViolations = getEffectiveJavaConventions().maxViolations
		printViolations = true

		// Many more formats available, see: https://github.com/tomasbjerre/violations-lib
		violations = [
			[
				"FINDBUGS",
				".",
				".*/build/reports/findbugs/.*\\.xml\$",
				"Findbugs"
			],
			[
				"FINDBUGS",
				".",
				".*/build/reports/spotbugs/.*\\.xml\$",
				"Spotbugs"
			],
			[
				"PMD",
				".",
				".*/build/reports/pmd/.*\\.xml\$",
				"Pmd"
			]
		]
	}

	check.finalizedBy violations
}

processResources.dependsOn spotlessApply

spotless {
	java {
		target '**/*.java'
		googleJavaFormat()
		targetExclude getEffectiveJavaConventions().formattingExcludedPatterns
	}
	groovyGradle {
		target '*.gradle', 'src/main/**/*.gradle'
		targetExclude getEffectiveJavaConventions().formattingExcludedPatterns
		greclipse()
	}
	json {
		target '*.json', 'src/main/**/*.json', 'src/test/**/*.json'
		gson()
				.indentWithSpaces(2)
				.version('2.8.1')
	}
}


/**
 * Supporting stuff
 */
def findResource(String name, classLoader = project.buildscript.classLoader) {
	URL resource = classLoader.getResource(name)
	if (resource == null) {
		logger.lifecycle("Cannot find resource \"${name}\"")
		return null;
	}
	return resource
}

def copyResourceToFile(URL resource, String copyTo, classLoader = project.buildscript.classLoader) {
	logger.lifecycle("Copying ${resource} to ${copyTo}")
	def content = resource.text
	def parentFile = new File(copyTo).getParentFile()
	if (parentFile != null) {
		parentFile.mkdirs()
	}
	FileWriter fw = new FileWriter(copyTo)
	BufferedWriter bw = new BufferedWriter(fw)
	bw.write(content)
	bw.close()
}

def copyIfFound(String name, String target=null, classLoader = project.buildscript.classLoader) {
	URL resource = findResource(name, classLoader)
	if (resource != null) {
		logger.lifecycle("Found resource ${name} as ${resource}")
		def newFilename = target == null ? "$buildDir/$name" : target
		copyResourceToFile(resource, newFilename)
		return new File(newFilename)
	}
}

def addSourceFolderIfExists(String folder) {
	if (new File(folder).exists()) {
		logger.lifecycle("Detected ${folder}, adding it as source folder")
		sourceSets.main.java.srcDirs += [folder]
	}
}

def addTestSourceFolderIfExists(String folder) {
	if (new File(folder).exists()) {
		logger.lifecycle("Detected ${folder}, adding it as test source folder")
		sourceSets.test.java.srcDirs += [folder]
	}
}
